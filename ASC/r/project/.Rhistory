lr_x
a = log(1/.99 - 1) / -2
b = -a * 32
f_x = function(x) {
1/ (1 + exp(-(a*x + b)))
}
curve(f_x,from = 28, to = 36)
x = seq(30, 34, by = 0.5)
x
p_x = lapply(x, f_x)
roll_dice = function(prob) {
rbinom(1, 1, prob)
}
y = lapply(p_x, roll_dice)
dt = do.call(rbind, Map(data.frame, x=x, p_x=p_x, y=y))
dt
form_x <- unlist(y) ~ x
lr_x = glm(formula = form_x, family = binomial)
lr_x
a = log(1/.99 - 1) / -2
b = -a * 32
f_x = function(x) {
1/ (1 + exp(-(a*x + b)))
}
curve(f_x,from = 28, to = 36)
x = seq(30, 34, by = 0.5)
x
p_x = lapply(x, f_x)
roll_dice = function(prob) {
rbinom(1, 1, prob)
}
y = lapply(p_x, roll_dice)
dt = do.call(rbind, Map(data.frame, x=x, p_x=p_x, y=y))
dt
form_x <- unlist(y) ~ x
lr_x = glm(formula = form_x, family = binomial)
lr_x
a = log(1/.99 - 1) / -2
b = -a * 32
f_x = function(x) {
1/ (1 + exp(-(a*x + b)))
}
curve(f_x,from = 28, to = 36)
x = seq(30, 34, by = 0.5)
x
p_x = lapply(x, f_x)
roll_dice = function(prob) {
rbinom(1, 1, prob)
}
y = lapply(p_x, roll_dice)
dt = do.call(rbind, Map(data.frame, x=x, p_x=p_x, y=y))
dt
form_x <- unlist(y) ~ x
lr_x = glm(formula = form_x, family = binomial)
lr_x
a = log(1/.99 - 1) / -2
b = -a * 32
f_x = function(x) {
1/ (1 + exp(-(a*x + b)))
}
curve(f_x,from = 28, to = 36)
x = seq(30, 34, by = 0.5)
x
p_x = lapply(x, f_x)
roll_dice = function(prob) {
rbinom(1, 1, prob)
}
y = lapply(p_x, roll_dice)
dt = do.call(rbind, Map(data.frame, x=x, p_x=p_x, y=y))
dt
form_x <- unlist(y) ~ x
lr_x = glm(formula = form_x, family = binomial)
lr_x
p1_x = lapply(x, f_x)
curve(f_x,from = 28, to = 36)
b1 = b
a1 = a
b = lr_x$coefficients[1]
a = lr_x$coefficients[2]
curve(f_x,from = 28, to = 36, add = TRUE, col = "red")
y1 = lapply(p_x, roll_dice)
dt1 = do.call(rbind, Map(data.frame, x=x, p_x=p_x, y=y, p1_x=p1_x, y1=y1))
dt1
y1 = lapply(p_x, roll_dice)
dt1 = do.call(rbind, Map(data.frame, x=x, p_x=p_x, y=y, p1_x=p1_x, y1=y1))
dt1
a = log(1/.99 - 1) / -2
b = -a * 32
f_x = function(x) {
1/ (1 + exp(-(a*x + b)))
}
curve(f_x,from = 28, to = 36)
x = seq(30, 34, by = 0.5)
x
p_x = lapply(x, f_x)
roll_dice = function(prob) {
rbinom(1, 1, prob)
}
y = lapply(p_x, roll_dice)
dt = do.call(rbind, Map(data.frame, x=x, p_x=p_x, y=y))
dt
form_x <- unlist(y) ~ x
lr_x = glm(formula = form_x, family = binomial)
lr_x
curve(f_x,from = 28, to = 36)
b1 = b
a1 = a
b = lr_x$coefficients[1]
a = lr_x$coefficients[2]
p1_x = lapply(x, f_x)
curve(f_x,from = 28, to = 36, add = TRUE, col = "red")
y1 = lapply(p_x, roll_dice)
dt1 = do.call(rbind, Map(data.frame, x=x, p_x=p_x, y=y, p1_x=p1_x, y1=y1))
dt1
clera
exit
exit()
i = c(1:23)
T = c(66, 67, 68, 70, 72, 75, 76, 79, 53, 58, 70, 75, 67, 67, 69, 70, 73, 76, 78, 81, 57, 63, 70)
A = c(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1)
length(i)
length(T)
length(A)
i = c(1:23)
T = c(66, 67, 68, 70, 72, 75, 76, 79, 53, 58, 70, 75, 67, 67, 69, 70, 73, 76, 78, 81, 57, 63, 70)
A = c(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1)
dt = do.call(rbind, Map(data.frame, i = i, T = T, A = A))
dt
glm(A~T, family = binomial)
curve(f_x, from = 40, to = 90)
i = c(1:23)
T = c(66, 67, 68, 70, 72, 75, 76, 79, 53, 58, 70, 75, 67, 67, 69, 70, 73, 76, 78, 81, 57, 63, 70)
A = c(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1)
dt = do.call(rbind, Map(data.frame, i = i, T = T, A = A))
dt
lr_x = glm(A~T, family = binomial)
b = lr_x$coefficients[1]
a = lr_x$coefficients[2]
f_x = function(x) {
1/ (1 + exp(-(a*x + b)))
}
curve(f_x, from = 40, to = 90)
dt[A == 1]
dt[A == 1]
dt[dt$A == 1]
dt[,A == 1]
dt[A == 1,]
boxplot(dt[A == 1,])
boxplot(dt[A == 1,]$T)
boxplot(dt[A == 0,]$T)
library(data.table)
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
dmarketing = data.table(read.csv("./Marketing.csv", sep = ";"))
head(dmarketing)
dmarketingEncoded <- mutate(dmarketing,
Size = ifelse(MarketSize > 500, "Supermarkt",
ifelse(MarketSize <= 301, "Geschaeft", "Markt")))
head(dmarketingEncoded)
dSize = dmarketingEncoded %>% group_by(Size) %>% summarize(
nr = length(LocationID)
)
dSize
dmarketingEncoded %>% group_by(Promotion) %>% summarize(
nr = length(LocationID)
)
ggplot(dmarketingEncoded, aes(x=Size, fill=Size)) + geom_histogram(position = "dodge",stat = "count")
ggplot(dmarketingEncoded, aes(x=Promotion), fill=Psdfromotion) + geom_histogram(position = "dodge",stat = "count")
dmarketingEncoded %>% filter(week == 1)
dmarketingEncoded %>% filter(Week == 1)
dweek2 = dmarketingEncoded %>% filter(Week == 2)
dweek1 = dmarketingEncoded %>% filter(Week == 1)
dweek2 = dmarketingEncoded %>% filter(Week == 2)
dweek2$Sales - dweek1$Sales
library(data.table)
library(dplyr)
library(plyr)
dtips = data.table(read.csv("./tips.csv"))
head(dtips)
# ratio function
ratio = function(tip=tip, total_bill=total_bill) {
round(sum(tip) / sum(total_bill) * 100, digits = 1)
}
# group by and calculate necessasry values
aggregate(dtips$tip~sex + day, data = dtips, mean)
dmodified = data.table(ddply(.data = dtips, .variables = c("sex", "day", "time"), .fun = summarize,
n = length(tip),
tip_mw = round(mean(tip), 2),
tip_sd = round(sd(tip), 2),
anteil = ratio(tip, total_bill)))
# order
dmodified$tip_sd = paste("(", dmodified$tip_sd, "")
dmodified$tip_sd = paste(dmodified$tip_sd, ")", "")
dmodified$tip = paste(dmodified$tip_mw, dmodified$tip_sd, " ");
dmodified$tip_mw = dmodified$tip_sd = NULL
dmodified$i <- seq.int(nrow(dmodified))
setcolorder(dmodified, c("i", setdiff(names(dmodified), "i")))
dnamed <- rename(dmodified, c("i" = "", "sex" = "Geschlecht","day" = "Tag","time" = "Zeit", "n" = "Anzahl", "anteil" = "Anteil", "tip" = "Tip MW(SD)"))
# ratio function
ratio = function(tip=tip, total_bill=total_bill) {
round(sum(tip) / sum(total_bill) * 100, digits = 1)
}
# group by and calculate necessasry values
aggregate(dtips$tip~sex + day, data = dtips, mean)
dmodified = data.table(ddply(.data = dtips, .variables = c("sex", "day", "time"), .fun = summarize,
n = length(tip),
tip_mw = round(mean(tip), 2),
tip_sd = round(sd(tip), 2),
anteil = ratio(tip, total_bill)))
# order
dmodified$tip_sd = paste("(", dmodified$tip_sd, "")
dmodified$tip_sd = paste(dmodified$tip_sd, ")", "")
dmodified$tip = paste(dmodified$tip_mw, dmodified$tip_sd, " ");
dmodified$tip_mw = dmodified$tip_sd = NULL
dmodified$i <- seq.int(nrow(dmodified))
setcolorder(dmodified, c("i", setdiff(names(dmodified), "i")))
dnamed <- rename(dmodified, c("i" = "", "sex" = "Geschlecht","day" = "Tag","time" = "Zeit", "n" = "Anzahl", "anteil" = "Anteil", "tip" = "Tip MW(SD)"))
dnamed <- rename(dmodified, c("i" = "", "sex" = "Geschlecht","day" = "Tag","time" = "Zeit", "n" = "Anzahl", "anteil" = "Anteil", "tip" = "Tip MW(SD)"))
dnamed <- rename(dmodified, c("i" = "i", "sex" = "Geschlecht","day" = "Tag","time" = "Zeit", "n" = "Anzahl", "anteil" = "Anteil", "tip" = "Tip MW(SD)"))
dnamed <- rename(data = dmodified, c("i" = "", "sex" = "Geschlecht","day" = "Tag","time" = "Zeit", "n" = "Anzahl", "anteil" = "Anteil", "tip" = "Tip MW(SD)"))
library(data.table)
library(dplyr)
library(plyr)
library(data.table)
library(plyr)
library(dplyr)
library(data.table)
library(plyr)
library(dplyr)
dtips = data.table(read.csv("./tips.csv"))
head(dtips)
# ratio function
ratio = function(tip=tip, total_bill=total_bill) {
round(sum(tip) / sum(total_bill) * 100, digits = 1)
}
# group by and calculate necessasry values
aggregate(dtips$tip~sex + day, data = dtips, mean)
dmodified = data.table(ddply(.data = dtips, .variables = c("sex", "day", "time"), .fun = summarize,
n = length(tip),
tip_mw = round(mean(tip), 2),
tip_sd = round(sd(tip), 2),
anteil = ratio(tip, total_bill)))
# order
dmodified$tip_sd = paste("(", dmodified$tip_sd, "")
dmodified$tip_sd = paste(dmodified$tip_sd, ")", "")
dmodified$tip = paste(dmodified$tip_mw, dmodified$tip_sd, " ");
dmodified$tip_mw = dmodified$tip_sd = NULL
dmodified$i <- seq.int(nrow(dmodified))
setcolorder(dmodified, c("i", setdiff(names(dmodified), "i")))
dnamed <- rename(data = dmodified, c("i" = "", "sex" = "Geschlecht","day" = "Tag","time" = "Zeit", "n" = "Anzahl", "anteil" = "Anteil", "tip" = "Tip MW(SD)"))
library(data.table)
library(dplyr)
library(plyr)
dtips = data.table(read.csv("./tips.csv"))
head(dtips)
# ratio function
ratio = function(tip=tip, total_bill=total_bill) {
round(sum(tip) / sum(total_bill) * 100, digits = 1)
}
# group by and calculate necessasry values
aggregate(dtips$tip~sex + day, data = dtips, mean)
dmodified = data.table(ddply(.data = dtips, .variables = c("sex", "day", "time"), .fun = summarize,
n = length(tip),
tip_mw = round(mean(tip), 2),
tip_sd = round(sd(tip), 2),
anteil = ratio(tip, total_bill)))
# order
dmodified$tip_sd = paste("(", dmodified$tip_sd, "")
dmodified$tip_sd = paste(dmodified$tip_sd, ")", "")
dmodified$tip = paste(dmodified$tip_mw, dmodified$tip_sd, " ");
dmodified$tip_mw = dmodified$tip_sd = NULL
dmodified$i <- seq.int(nrow(dmodified))
setcolorder(dmodified, c("i", setdiff(names(dmodified), "i")))
dnamed <- rename(data = dmodified, c("i" = "", "sex" = "Geschlecht","day" = "Tag","time" = "Zeit", "n" = "Anzahl", "anteil" = "Anteil", "tip" = "Tip MW(SD)"))
dnamed <- rename(dmodified, c("i" = "", "sex" = "Geschlecht","day" = "Tag","time" = "Zeit", "n" = "Anzahl", "anteil" = "Anteil", "tip" = "Tip MW(SD)"))
dnamed <- plyr::rename(dmodified, c("i" = "", "sex" = "Geschlecht","day" = "Tag","time" = "Zeit", "n" = "Anzahl", "anteil" = "Anteil", "tip" = "Tip MW(SD)"))
library(data.table)
library(plyr)
library(dplyr)
dtips = data.table(read.csv("./tips.csv"))
head(dtips)
# ratio function
ratio = function(tip=tip, total_bill=total_bill) {
round(sum(tip) / sum(total_bill) * 100, digits = 1)
}
# group by and calculate necessasry values
aggregate(dtips$tip~sex + day, data = dtips, mean)
dmodified = data.table(ddply(.data = dtips, .variables = c("sex", "day", "time"), .fun = summarize,
n = length(tip),
tip_mw = round(mean(tip), 2),
tip_sd = round(sd(tip), 2),
anteil = ratio(tip, total_bill)))
# order
dmodified$tip_sd = paste("(", dmodified$tip_sd, "")
dmodified$tip_sd = paste(dmodified$tip_sd, ")", "")
dmodified$tip = paste(dmodified$tip_mw, dmodified$tip_sd, " ");
dmodified$tip_mw = dmodified$tip_sd = NULL
dmodified$i <- seq.int(nrow(dmodified))
setcolorder(dmodified, c("i", setdiff(names(dmodified), "i")))
dnamed <- plyr::rename(dmodified, c("i" = "", "sex" = "Geschlecht","day" = "Tag","time" = "Zeit", "n" = "Anzahl", "anteil" = "Anteil", "tip" = "Tip MW(SD)"))
# add index column
# put index column to the first place
dnamed
setcolorder(dnamed, c(setdiff(names(dnamed), "Anteil"), "Anteil"))
dnamed = dnamed[order(-Anteil)]
dnamed$Anteil = paste(dnamed$Anteil, "%", " ");
dnamed$Tag = mapvalues(dnamed$Tag, from = c("Thur", "Fri", "Sat", "Sun"), to = c("Do", "Fr", "Sa", "So"))
dnamed$Zeit = mapvalues(dnamed$Zeit, from = c("Lunch", "Dinner"), to = c("Mittag", "Abend"))
dnamed$Geschlecht = mapvalues(dnamed$Geschlecht, from = c("Female", "Male"), to = c("Männlich", "Weiblich"))
dnamed
library(data.table)
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
dmarketing = data.table(read.csv("./Marketing.csv", sep = ";"))
head(dmarketing)
dmarketingEncoded <- mutate(dmarketing,
Size = ifelse(MarketSize > 500, "Supermarkt",
ifelse(MarketSize <= 301, "Geschaeft", "Markt")))
head(dmarketingEncoded)
dSize = dmarketingEncoded %>% group_by(Size) %>% summarize(
nr = length(LocationID)
)
dSize
dmarketingEncoded %>% group_by(Promotion) %>% summarize(
nr = length(LocationID)
)
ggplot(dmarketingEncoded, aes(x=Size, fill=Size)) + geom_histogram(position = "dodge",stat = "count")
ggplot(dmarketingEncoded, aes(x=Promotion), fill=Psdfromotion) + geom_histogram(position = "dodge",stat = "count")
dmarketingByLoc = data.table(dmarketingEncoded %>% group_by(LocationID))
calculateSales = function (data, wstart, wend) {
currentCompany = 0
dLength = length(data$LocationID)
data[, Diff := 0]
index = 4 * currentCompany + 1
while (index < dLength) {
index = currentCompany * 4 + 1
for (week in wstart:wend) {
index = index + 1
data[index]$Diff = data[index,]$Sales - data[index - 1,]$Sales
}
currentCompany = currentCompany + 1
}
data
}
dmarketingDiff = calculateSales(dmarketingByLoc, 2, 4)
salesWeek1 = colMeans(dmarketingByLoc %>% filter(Week == 1) %>% select(Sales))
salesWeek1
sd(dmarketingByLoc %>% filter(Week == 1) %>% select(Sales))
sd(c(dmarketingByLoc %>% filter(Week == 1) %>% select(Sales)))
msw1 = colMeans(dmarketingByLoc %>% filter(Week == 1) %>% select(Sales))
msw1
salesWeek1 = dmarketingByLoc %>% filter(Week == 1) %>% select(Sales)
salesWeek1
c(salesWeek1)
salesWeek1 = c(dmarketingByLoc %>% filter(Week == 1) %>% select(Sales))
sd(salesWeek1)
is.vector(salesWeek1)
sd(salesWeek1, na.rm = T)
salesWeek1sd = c(dmarketingByLoc %>% filter(Week == 1) %>% summarize(SD = sd(Sales))
salesWeek1sd = dmarketingByLoc %>% filter(Week == 1) %>% summarize(SD = sd(Sales)
salesWeek1sd = dmarketingByLoc %>% filter(Week == 1) %>% summarize(SD = sd(Sales))
paste(c(msw1, " +- ", sdsw1), collapse = '')
sdsw1 = dmarketingByLoc %>% filter(Week == 1) %>% summarize(SD = sd(Sales))
paste(c(msw1, " +- ", sdsw1), collapse = '')
msw4 = colMeans(dmarketingByLoc %>% filter(Week == 4) %>% select(Sales))
sdsw4 = dmarketingByLoc %>% filter(Week == 4) %>% summarize(SD = sd(Sales))
paste(c(msw4, " +- ", sdsw4), collapse = '')
paste(c(round(msw4), " +- ", round(sdsw4)), collapse = '')
paste(c(round(msw1), " +- ", round(sdsw1)), collapse = '')
median(dmarketingByLoc %>% filter(Week == 4) %>% select(Sales))
?iqr
Median, IQR & Spannweite zum Beginn der Studie
```{r} sdsw4 = dmarketingByLoc %>% filter(Week == 4) %>% summarize(Median = Median(Sales), IQR = IQR(Sales), range = range(Sales))
```
statw4 = dmarketingByLoc %>% filter(Week == 4) %>% summarize(Median = Median(Sales), IQR = IQR(Sales), range = range(Sales))
statw4 = dmarketingByLoc %>% filter(Week == 4) %>% summarize(Median = median(Sales), IQR = IQR(Sales), range = range(Sales))
?range
statw4 = dmarketingByLoc %>% filter(Week == 4) %>% summarize(Median = median(Sales), IQR = IQR(Sales))
statw4
statw4 = dmarketingByLoc %>% filter(Week == 4) %>% summarize(Median = median(Sales), IQR = IQR(Sales), range = paste(range(Sales), collapse = ''))
statw4
statw4 = dmarketingByLoc %>% filter(Week == 4) %>% summarize(Median = median(Sales), IQR = IQR(Sales), range = paste(range(Sales), collapse = ' - '))
statw4
statw1 = dmarketingByLoc %>% filter(Week == 1) %>% summarize(Median = median(Sales), IQR = IQR(Sales), range = paste(range(Sales), collapse = ' - '))
statw1
statgsize = dmarketingByLoc %>% group_by(Size) %>% summarize(Median = mean(Sales))
statgsize
statgsize = dmarketingByLoc %>% group_by(Size) %>% summarize(Mean = mean(Sales))
statgsize
mwnum = dmarketingByLoc %>% filter(Week == 1) %>% select_if(is.numeric)
mwnum
mwnum = dmarketingByLoc %>% filter(Week == 1) %>% select_if(is.numeric) %>% summarize(mean())
mwnum = dmarketingByLoc %>% filter(Week == 1) %>% select_if(is.numeric) %>% summarize(mean)
mwnum = colMeans(dmarketingByLoc %>% filter(Week == 1) %>% select_if(is.numeric))
mwnum
mwnum = colMeans(dmarketingByLoc %>% select_if(is.numeric))
mwnum
mwnum = colMeans(dmarketingByLoc %>% select_if(is.numeric))
mwnum
install.packages("dummies")
knitr::opts_chunk$set(echo = TRUE)
cor(ger_comp[,c(4:7)])
knitr::opts_chunk$set(echo = TRUE)
df = data.frame(rnorm(100, mean=50, s=20))
count <- 0;
min(df)
max(df)
for (i in df[[1]]) {
if (i < 60) {
} else {
count <- count + 1
}
}
count
head(iris)
df_log = cbind(log(iris[,c(1:4)]), Species=iris[,5])
head(df_log)
is.sorted = function(x) {
index = 1
toReturn = TRUE
for (val in tail(x, -1)) {
if (val < x[index]) toReturn = FALSE
index = index + 1
}
toReturn
}
is.sorted(c(1:9))
is.sorted(c(9:1))
is.sorted(c(4:20, 19:4))
ger_comp = data.frame(read.csv(file="./Germany_largest_companies.csv", sep=";"))
head(ger_comp)
boxplot(ger_comp[,c(4, 7)])
boxplot(ger_comp[,6], xlab="Assets")
boxplot(ger_comp[,5], xlab="Profits")
cor(ger_comp[,c(4:7)])
boxplot(combined[,c(3, 4)])
knitr::opts_chunk$set(echo = TRUE)
df = data.frame(rnorm(100, mean=50, s=20))
count <- 0;
min(df)
max(df)
for (i in df[[1]]) {
if (i < 60) {
} else {
count <- count + 1
}
}
count
head(iris)
df_log = cbind(log(iris[,c(1:4)]), Species=iris[,5])
head(df_log)
is.sorted = function(x) {
index = 1
toReturn = TRUE
for (val in tail(x, -1)) {
if (val < x[index]) toReturn = FALSE
index = index + 1
}
toReturn
}
is.sorted(c(1:9))
is.sorted(c(9:1))
is.sorted(c(4:20, 19:4))
ger_comp = data.frame(read.csv(file="./Germany_largest_companies.csv", sep=";"))
head(ger_comp)
boxplot(ger_comp[,c(4, 7)])
boxplot(ger_comp[,6], xlab="Assets")
boxplot(ger_comp[,5], xlab="Profits")
cor(ger_comp[,c(4:7)])
house_prices = data.frame(read.csv(file="./HousePricesAroundtheWorld.csv", sep=";")[,c(1, 2, 4)])
credit_growth = data.frame(read.csv(file="./CreditGrowth.csv", sep=";"))[,3]
head(credit_growth)
combined = cbind(house_prices, credit_growth)
head(combined)
boxplot(combined[,c(3, 4)])
setwd("./git/fhhgb_ws19/ASC/r/project/")
source = data.table(read.xls("./deposit.xlsx"))
# Preparation
library(gdata)
library(plyr)
library(dplyr)
library(data.table)
library(plotly)
source = data.table(read.xls("./deposit.xlsx"))
head(source)
unique(source$job)
cSource = source %>% group_by(nr.employed) %>% add_count() %>% select(nr.employed, n) %>% plot_ly(sort = T, labels = source$nr.employed, values = "n") %>% add_pie()
pie(prop.table(table(fsJob$job)))
# Age distribution
hsAge = hist(source$age)
glimpse(source)
fsMarital = droplevels(source %>% filter(source$marital != 'unknown'))
barplot(prop.table(table(fsMarital$marital)))
fsJob = droplevels(source %>% filter(source$job != 'unknown'))
pie(prop.table(table(fsJob$job)))
ks.test(x = hsAge$counts, y = 'pnorm')
pie(prop.table(fsMarital$marital))
pie(prop.table(table(fsMarital$marital)))
ks.test(x = hsAge$counts, y = 'pnorm')
pie(prop.table(table(fsJob$job)))
unique(fsMarital$nr.employed)
pie(prop.table(table(source$nr.employed)))
unique(source$loan)
pie(prop.table(table(source$loan)))
source = droplevels(source %>% filter(source$loan != 'unknown'))
pie(prop.table(table(source$loan)))
pie(prop.table(table(fsMarital$marital + loan)))
pie(prop.table(table(fsMarital$marital+loan)))
